#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec4 toLightVector[10];
in vec3 toCameraVector;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColour[10];
uniform vec3 attenuation[10];
uniform float shineDamper;
uniform float reflectivity;

vec3 totalDiffuse = vec3(0.0);
vec3 totalSpecular = vec3(0.0);

void calculateLight(int i){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);
    
    if(toLightVector[i].w < 0.5){
        return;
    }
    float distance = length(toLightVector[i].xyz);
    float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
    vec3 unitLightVector = normalize(toLightVector[i].xyz);
    float nDot1 = dot(unitNormal, unitLightVector);
    float brightness = max(nDot1,0.1);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    specularFactor = max(specularFactor, 0.1);
    float dampedFactor = pow(specularFactor, shineDamper);
    totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
    totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
    totalDiffuse = max(totalDiffuse, 0.001);
}

void main(void){
    float ambient = 0.2;
    for(int i=0; i<10; i++){
        calculateLight(i);
    }
    totalDiffuse = totalDiffuse + ambient;
    

    out_Colour = vec4(totalDiffuse,1.0) * texture(textureSampler, pass_textureCoords) + vec4(totalSpecular, 1.0);

}